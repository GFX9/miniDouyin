// Code generated by hertz generator.

package api

import (
	"context"
	log "github.com/sirupsen/logrus"
	"miniDouyin/biz/dal/pg"
	"miniDouyin/biz/dal/rdb"
	"miniDouyin/biz/model/miniDouyin/api"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	log.Debugln("Feed 被调用")
	var err error
	var req api.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		log.Debugln("参数绑定失败")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.FeedResponse)
	// 先尝试从缓存完成业务（此功能还未使用，因为缓存同步时间序列较为复杂）
	//if rdb.RedisFeed(&req, resp) {
	//	log.Debugln("从缓存完成用户登录")
	//} else {
	pg.DBVideoFeed(&req, resp)
	//}
	log.Debugf("resp +v", resp)

	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserRegisterResponse)

	pg.DBUserRegister(&req, resp)

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserLoginResponse)
	// 先尝试从缓存完成业务
	if rdb.RedisLogin(&req, resp) {
		log.Debugln("从缓存完成用户登录")
	} else {
		// 从数据库读取的业务要记得更新缓存
		pg.DBUserLogin(&req, resp)
	}
	// Debug
	log.Debugf("resp = %+v\n", resp)

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserResponse)
	// 先尝试从缓存完成业务
	if rdb.RedisGetUserInfo(&req, resp) {
		log.Infoln("从缓存完成用户信息获取")
	} else {
		pg.DBGetUserinfo(&req, resp)
	}
	c.JSON(consts.StatusOK, resp)
}

// VideoPublishAction .
// @router /douyin/publish/action/ [POST]
func VideoPublishAction(ctx context.Context, c *app.RequestContext) {
	log.Debugln("VideoPublishAction 被调用")
	var err error
	var req api.PublishActionRequest
	resp := new(api.PublishActionResponse)

	form, err := c.MultipartForm()

	// err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}

	pg.DBReceiveVideo(&req, resp, form, c)

	// Debug
	log.Debugf("resp = %+v\n", resp)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.PublishListResponse)
	// 先尝试从缓存完成业务
	if rdb.RedisPublishList(&req, resp) {
		log.Infoln("从缓存完成用户发布列表获取")
	} else {
		pg.DBVideoPublishList(&req, resp)
	}
	// Debug
	log.Debugf("resp = %+v\n", resp)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.FavoriteActionResponse)
	pg.DBFavoriteAction(&req, resp, ctx)
	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/publish/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.FavoriteListResponse)
	pg.DBFavoriteList(&req, resp)
	c.JSON(consts.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CommentActionResponse)

	pg.DBCommentAction(&req, resp, ctx)

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CommentListResponse)

	pg.DBCommentList(&req, resp)

	c.JSON(consts.StatusOK, resp)
}

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RelationActionResponse)

	pg.DBUserAction(&req, resp)
	c.JSON(consts.StatusOK, resp)
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	log.Debugln("FollowList 被调用")

	var err error
	var req api.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RelationFollowListResponse)

	pg.DBFollowList(&req, resp)

	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RelationFollowerListResponse)

	pg.DBFollowerList(&req, resp)

	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RelationFriendListResponse)

	pg.DBFriendList(&req, resp)

	c.JSON(consts.StatusOK, resp)
}

// ChatRec .
// @router /douyin/message/chat/ [GET]
func ChatRec(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ChatRecordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.ChatRecordResponse)

	pg.DBChatRec(&req, resp)

	log.Debugf("CgatRec: %+v", resp)

	c.JSON(consts.StatusOK, resp)
}

// SendMsg .
// @router /douyin/message/action/ [POST]
func SendMsg(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SendMsgRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.SendMsgResponse)

	pg.DBSendMsg(&req, resp)

	c.JSON(consts.StatusOK, resp)
}
